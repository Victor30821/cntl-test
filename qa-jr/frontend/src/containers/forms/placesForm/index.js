import React, { useState, useEffect, useRef, useMemo } from 'react';
import { Card, CardForm, CardInput, Select, Col, BottomActionButtons, Switch, Text, CardTitle, Link } from 'components'
import { Row } from "reactstrap";
import { localizedStrings } from "constants/localizedStrings";
import { useDispatch, useSelector } from 'react-redux';
import { placeChangeSelectors, searchAddreessFromZipCode, loadGroups, searchMultiAddresses, } from "store/modules";
import {
    cities, getCityByName, getExactCity
} from 'utils/cities'

export default function PlacesForm({
    history,
    onSubmit,
    inputsConfig,
    qrcodeUrl
}) {

    const dispatch = useDispatch()

    const selectInputRef = useRef(null);

    // eslint-disable-next-line
    const [qrCodeFileName, setqrCodeFileName] = useState(`${inputsConfig.getValues()?.identification} - ${inputsConfig.getValues()?.name}`);

    const [accessCode, setAccessCode] = useState(inputsConfig.autogeneratedCode || inputsConfig.getValues()?.code);

    const zipcodeInputRef = useRef(null);

    const {
        groups,
        loadLoading: groupsLoading,
        failLoading: groupsFail,
    } = useSelector(state => state.groups);

    const {
        user: { organization_id },
    } = useSelector(state => state.auth);

    const {
        selectors,
    } = useSelector(state => state.places);

    const {
        searchedAddress,
    } = useSelector(state => state.map);

    const {
        clients,
        loadLoading: clientsLoading,
        failLoading: clientsFail,
    } = useSelector(state => state.clients);

    const [visibleCities, setVisibleCities] = useState([]);

    const [visibleClients, setVisibleClients] = useState([]);

    const [visibleTags, setVisibleTags] = useState([]);

	const initialValue = history.location?.state?.place;

    const [partnerCheckbox, setPartnerCheckbox] = useState(initialValue?.partners?.length > 0);


    const [fieldsToValidate,] = useState([
        "name",
        "identification",
        "address1",
        "number1",
        "complement1",
        "city1",
        "address2",
        "number2",
        "complement2",
        "city2",
        "partner_name",
    ]);

    const [errors, setErrors] = useState({
        name: {
            message: "",
            error: false,
        },
        identification: {
            message: "",
            error: false,
        },
        address1: {
            message: "",
            error: false,
        },
        number1: {
            message: "",
            error: false,
        },
        complement1: {
            message: "",
            error: false,
        },
        city1: {
            message: "",
            error: false,
        },
        address2: {
            message: "",
            error: false,
        },
        number2: {
            message: "",
            error: false,
        },
        complement2: {
            message: "",
            error: false,
        },
        city2: {
            message: "",
            error: false,
        },
        partner_name: {
            message: "",
            error: false,
        },
    });



    const showError = (field, message = localizedStrings.fieldRequired) => {
        if (!errors[field]) return;
        errors[field].message = message;
        errors[field].error = true;
    }
    const clearError = field => {
        if (!errors[field]) return;
        errors[field].message = "";
        errors[field].error = false;
    }

    function handleError({
        fields
    }) {
        let hasError = false;
        try {

            const hasDeparture = !!inputsConfig.hasDepartureAddress;

            const hasToIgnoreValidationFields = {
                partner_name: () => !partnerCheckbox,
                address2: () => !hasDeparture,
                number2: () => !hasDeparture,
                complement2: () => !hasDeparture,
                city2: () => !hasDeparture,
            }
            // eslint-disable-next-line
            fields.map(field => {
                const [
                    fieldValue,
                    selectorValue
                ] = [
                        inputsConfig.getValues()?.[field] ?? "",
                        selectors[field]
                    ];

                const hasValue = fieldValue.toString().trim() || selectorValue;

                const ignoreValidation = !!hasToIgnoreValidationFields[field]?.();

                const hasToClearError = hasValue || ignoreValidation;

                if (hasToClearError) return clearError(field);

                showError(field);

                hasError += true;
            })

            setErrors({ ...errors });
        } catch (error) {
            console.log(error);
        }
        return !!hasError
    }

    const handleSubmit = (e) => {

        const hasError = handleError({ fields: fieldsToValidate });

        if (!hasError) searchLatLngFromAddress()

    }


    const onSelectInputChange = value => {
        selectInputRef?.current && clearTimeout(selectInputRef?.current);

        selectInputRef.current = setTimeout(() => {
            const MIN_TYPED_LENGTH = 1;

            if (value?.length <= MIN_TYPED_LENGTH) return;

            const searchedCities = getCityByName({ name: value });

            setVisibleCities(searchedCities)
        }, 1000)
    }

    const onZipcodeChange = (value, type) => {
        if (!zipcodeInputRef?.current) zipcodeInputRef.current = {};

        if (zipcodeInputRef?.current?.[type]) {
            clearTimeout(zipcodeInputRef?.current[type]);
            zipcodeInputRef.current = {}
        }

        zipcodeInputRef.current[type] = setTimeout(() => {

            const hasCompletedZipcode = value?.length === localizedStrings.zipcodeMask.length;

            if (!hasCompletedZipcode) return;

            dispatch(searchAddreessFromZipCode({
                zipCode: value,
            }));

        }, 1000)
    }

    const canSearchAddressByFirstZipcode = useMemo(
        () => {
            const alreadyHasValues = [
                !inputsConfig.getValues()?.address1,
                !selectors?.city1?.label,
                !inputsConfig.getValues()?.neighborhood1,
            ].some(Boolean)

            return alreadyHasValues
        },
        // eslint-disable-next-line
        [
            // eslint-disable-next-line
            inputsConfig.getValues()?.address1,
            // eslint-disable-next-line
            selectors?.city1?.label,
            // eslint-disable-next-line
            inputsConfig.getValues()?.neighborhood1,
        ]
    )

    const canSearchAddressBySecondZipcode = useMemo(
        () => {
            const alreadyHasValues = [
                !inputsConfig.getValues()?.address2,
                !selectors?.city2?.label,
                !inputsConfig.getValues()?.neighborhood2
            ].some(Boolean)

            return alreadyHasValues
        },
        // eslint-disable-next-line
        [
            // eslint-disable-next-line
            inputsConfig.getValues()?.address2,
            // eslint-disable-next-line
            selectors?.city2?.label,
            // eslint-disable-next-line
            inputsConfig.getValues()?.neighborhood2,
        ]
    )

    const searchLatLngFromAddress = () => {

        try {
            const types = ['1', '2'];

            const addressObj = JSON.parse(JSON.stringify({
                ...inputsConfig.getValues(),
                city1: selectors.city1?.label,
                state1: selectors.city1?.state,
                city2: selectors.city2?.label,
                state2: selectors.city2?.state,
            }));

            const noneAddressSearch = Object.values(addressObj).length === 0;

            if (noneAddressSearch) return;

            const texts = types.map(type => Object.entries(addressObj).filter(address => {

                const [key,] = address

                const isDesiredType = key.match(type);

                if (!isDesiredType) return false;

                const isRequiredProperty = [
                    "address" + type,
                    "neighborhood" + type,
                    "number" + type,
                    "city" + type,
                    "state" + type
                ].includes(key)

                if (!address["address" + type]) address["address" + type] = address["neighborhood" + type] || address["city" + type];

                return isRequiredProperty;

            }).map(address => address.pop())
                .filter(Boolean).join(", "))

            dispatch(searchMultiAddresses({
                texts
            }));

        } catch (error) {

        }

    }

    const setFormValues = (inputNamesToClear = [], value) => {
        inputNamesToClear.forEach((inputName, index) => {
            inputsConfig.onChange(inputName, value?.[index])
        })
    }

    const firstLetterUpperCase = ([first, ...rest]) =>
        [first?.toUpperCase(), ...rest.map(letter => letter.toLowerCase())].join("")

    const setAddressSettings = (type) => {
        if (!searchedAddress?.city) return;

        const selectedCity = getExactCity({ name: searchedAddress.city });

        [
            "neighborhood",
            "address",
        ].forEach(ids => {
            inputsConfig.onChange(ids + type, searchedAddress[ids]);
        });

        dispatch(placeChangeSelectors({
            selectors: { ["city" + type]: selectedCity }
        }))
    }

    const setAddressesInformation = () => {

        const onlyFirstItemIndex = 1;

        const validAddressResults = searchedAddress.slice(0, inputsConfig.hasDepartureAddress
            ? searchedAddress.length
            : onlyFirstItemIndex
        );

        const newSearchedAddress = validAddressResults.map(address => address.result.slice().shift());

        const addressByType = {
            1: newSearchedAddress.shift(),
            2: newSearchedAddress.pop(),
        }

        const values = Object.keys(addressByType)
            .map(type => {
                // eslint-disable-next-line
                if (!addressByType[type]) return;

                const addressObj = addressByType[type] || {};

                const filledValues = inputsConfig.getValues();

                const [
                    numberByType,
                    complementByType,
                    zipcodeByType,
                    cityByType,
                ] = [
                        "number" + type,
                        "complement" + type,
                        "zipcode" + type,
                        "city" + type
                    ];

                const letterUpperCase = {
                    address: firstLetterUpperCase(addressObj.streetName || ""),
                    neighborhood: firstLetterUpperCase(addressObj.extra?.neighborhood || ""),
                    city: firstLetterUpperCase(addressObj.city || selectors?.[cityByType]?.label || ""),
                };

                const fieldsWithType = {
                    address: letterUpperCase.address || undefined,
                    neighborhood: letterUpperCase.neighborhood || undefined,
                    number: addressObj.streetNumber || filledValues[numberByType] || undefined,
                    complement: filledValues[complementByType] || undefined,
                    zipcode: filledValues[zipcodeByType] || undefined,
                    city: letterUpperCase.city || undefined,
                    state: addressObj.state || selectors?.[cityByType]?.state || undefined,
                    lat: addressObj.latitude || undefined,
                    lng: addressObj.longitude || undefined,
                }
                return fieldsWithType;
            })
            .filter(Boolean);

        onSubmit(values);
    }

    useEffect(() => {

        const initialCities = cities.slice(0, 10);

        setVisibleCities(initialCities)

        dispatch(loadGroups({
            organization_id,
            entity: "place"
        }));
    // eslint-disable-next-line
    }, []);

    useEffect(() => {

        const hasAddresses = Array.isArray(searchedAddress) && searchedAddress.length > 1;

        const hasZipcodeAddress = !!searchedAddress && typeof searchedAddress === 'object';

        if (hasAddresses) setAddressesInformation();

        if (hasZipcodeAddress && !!zipcodeInputRef.current) setAddressSettings(Object.keys(zipcodeInputRef.current).shift())
        // eslint-disable-next-line
    }, [searchedAddress]);

    useEffect(() => {

        setVisibleClients(clients);

    }, [clients]);

    useEffect(() => {
        const hasTags = groups?.length > 0;

        if (hasTags) setVisibleTags(groups.map(group => group.tagName));

    }, [groups]);

    useEffect(() => {

        if (!partnerCheckbox) setFormValues([
            "partner_name",
            "partner_email",
            "partner_phone"
        ]);

        const hasAccessCode = !!inputsConfig.accessKeyCheckbox;

        if (!hasAccessCode) {
            setAccessCode("")
            setFormValues(["code"]);
        }

        if (hasAccessCode) {
            const codePossibleValues = {
                edit: inputsConfig.getValues()?.code || inputsConfig.autogeneratedCode,
                create: inputsConfig.autogeneratedCode,
            }
            const property = inputsConfig.isEdit ? "edit" : "create";

            const code = codePossibleValues[property];

            setAccessCode(code);
        }
        // eslint-disable-next-line
    }, [partnerCheckbox, inputsConfig.accessKeyCheckbox]);

    return (
        <>
            <Card margin={"25px 25px 0px 25px"}>
                <CardForm padding={"16px"}>
                    <Row>
                        <Col xl="6" xxl="6" >
                            <CardInput
                                onChange={inputsConfig.onChange}
                                register={inputsConfig.register}
                                inputs={[
                                    {
                                        label: localizedStrings.name,
                                        defaultValue: inputsConfig.getValues()?.name,
                                        name: "name",
                                        type: "text",
                                        error: errors.name.error,
                                        errorText: errors.name.message,
                                        required: true,
                                        placeholder: localizedStrings.typeClientName
                                    },
                                ]}
                            />
                        </Col>
                        <Col xl="6" xxl="6" >
                            <CardInput
                                onChange={inputsConfig.onChange}
                                register={inputsConfig.register}
                                inputs={[
                                    {
                                        label: localizedStrings.identification,
                                        defaultValue: inputsConfig.getValues()?.identification,
                                        name: "identification",
                                        type: "custom",
                                        noMask: true,
                                        error: errors.identification.error,
                                        errorText: errors.identification.message,
                                        required: true,
                                        placeholder: localizedStrings.typePlaceIdentification
                                    },
                                ]}
                            />
                        </Col>
                    </Row>
                    <Row>
                        <Col xl="6" xxl="6" >
                            <CardInput
                                onChange={inputsConfig.onChange}
                                register={inputsConfig.register}
                                inputs={[
                                    {
                                        label: localizedStrings.phone,
                                        defaultValue: inputsConfig.getValues()?.phone,
                                        name: "phone",
                                        type: "phone",
                                        placeholder: localizedStrings.typePhone,
                                    },
                                ]}
                            />
                        </Col>
                        <Col xl="6" xxl="6" >
                            <CardInput
                                onChange={inputsConfig.onChange}
                                register={inputsConfig.register}
                                inputs={[
                                    {
                                        label: localizedStrings.email,
                                        defaultValue: inputsConfig.getValues()?.email,
                                        name: "email",
                                        type: "email",
                                        placeholder: localizedStrings.typeEmail,
                                    },
                                ]}
                            />
                        </Col>
                    </Row>
                    <Row>
                        <Col xl="6" xxl="6" >
                            <Row style={{
                                margin: "0"
                            }}>
                                <Col xl="6" xxl="6" style={{
                                    padding: "0px 5px 0px 10px",
                                }}>
                                    <Text
                                        fontWeight="bold"
                                        margin="0 0 10px 0"
                                        color="#666"
                                    >
                                        {localizedStrings.companionData}
                                    </Text>
                                    <Switch
                                        checked={partnerCheckbox}
                                        onCheck={e => setPartnerCheckbox(hasPartner => !hasPartner)}
                                        text={localizedStrings.withCompanion}
                                    />
                                </Col>
                                <Col xl="6" xxl="6" style={{
                                    padding: "0",
                                }}>
                                    <Text
                                        fontWeight="bold"
                                        margin="0 0 10px 0"
                                        color="#666"
                                    >
                                        {localizedStrings.accessCode}
                                    </Text>
                                    <Switch
                                        checked={inputsConfig.accessKeyCheckbox}
                                        onCheck={(e) => inputsConfig.setAccessKeyCheckbox(accessCode => !accessCode)}
                                        text={inputsConfig.accessKeyCheckbox
                                            ? localizedStrings.activated
                                            : localizedStrings.inactive}
                                    />
                                </Col>
                            </Row>
                        </Col>
                        {
                            inputsConfig.accessKeyCheckbox &&
                            <Col xl="6" xxl="6" >
                                <CardInput
                                    onChange={inputsConfig.onChange}
                                    register={inputsConfig.register}
                                    inputs={[
                                        {
                                            label: localizedStrings.accessCode,
                                            value: accessCode,
                                            name: "code",
                                            type: "text",
                                            maxLength: 7,
                                            readOnly: true,
                                            required: inputsConfig.accessKeyCheckbox,
                                            placeholder: localizedStrings.typeAccessCode,
                                        },
                                    ]}
                                />
                            </Col>
                        }
                    </Row>
                    <Row>
                        <Col xl="6" xxl="6"
                            style={{
                                margin: "10px 0"
                            }}
                        >
                            <Select
                                style={{
                                    margin: "0 10px"
                                }}
                                title={localizedStrings.associatedClient}
                                options={visibleClients?.map?.(client => ({
                                    label: client.company_name,
                                    value: client.id,
                                })) || []}
                                onChange={(item) => {
                                    dispatch(placeChangeSelectors({
                                        selectors: { client: item }
                                    }))
                                }}
                                loading={clientsLoading}
                                error={clientsFail}
                                value={selectors?.client || {}}
                                emptyStateText={localizedStrings.noClientFound}
                                placeholder={localizedStrings.selectACity}
                            />
                        </Col>
                        <Col xl="6" xxl="6" >
                            <CardInput
                                onChange={inputsConfig.onChange}
                                register={inputsConfig.register}
                                inputs={[
                                    {
                                        label: localizedStrings.externalId,
                                        defaultValue: inputsConfig.getValues()?.external_id,
                                        name: "external_id",
                                        type: "text",
                                        placeholder: localizedStrings.typeExternalId,
                                    }
                                ]}
                            />
                        </Col>
                    </Row>
                    <Row>
                        <Col xl="6" xxl="6" style={{
                            margin: "10px 0"
                        }}>
                            <Select
                                title={localizedStrings.tag}
                                style={{
                                    margin: "0 10px"
                                }}
                                isMulti
                                isCreatable
                                onCreate={tag => {
                                    if (!tag) return;
                                    const addedTag = (selectors.tags && JSON.parse(JSON.stringify(selectors.tags))) || [];
                                    addedTag.push(tag);
                                    setVisibleTags(addedTag);
                                    dispatch(placeChangeSelectors({
                                        selectors: { tags: addedTag }
                                    }))
                                }}
                                options={visibleTags.map?.((tag, index) => ({
                                    label: tag,
                                    value: index,
                                })) || []}
                                loading={groupsLoading}
                                error={groupsFail}
                                placeholder={localizedStrings.selectATag}
                                onChange={tags => {
                                    const tagsIsNull = tags === null;
                                    if (tagsIsNull) tags = [];
                                    const formattedTags = tags.map(tag => tag.label);

                                    dispatch(placeChangeSelectors({
                                        selectors: { tags: formattedTags }
                                    }))
                                }}
                                value={Array.isArray(selectors.tags)
                                    ? selectors.tags.map((tag, index) => {
                                        return {
                                            label: tag,
                                            value: index
                                        }
                                    })
                                    : []
                                }
                                emptyStateText={localizedStrings.noTagFound}
                            />
                        </Col>
                        <Col xl="3" xxl="3" style={{
                            padding: "15px 5px 0px 25px",
                        }}>
                            <Text
                                fontWeight="bold"
                                margin="0 0 10px 0"
                                color="#666"
                            >
                                {localizedStrings.special}
                            </Text>
                            <Switch
                                checked={inputsConfig.restrictionCheckbox}
                                onCheck={e => inputsConfig.setRestriction(hasRestriction => !hasRestriction)}
                                text={inputsConfig.restrictionCheckbox
                                    ? localizedStrings.activated
                                    : localizedStrings.inactive
                                }
                            />
                        </Col>
                        <Col xl="3" xxl="3" style={{
                            padding: "15px 5px 0px 25px",
                        }}>
                            <Text
                                fontWeight="bold"
                                margin="0 0 10px 0"
                                color="#666"
                            >
                                {localizedStrings.landingAddress}
                            </Text>
                            <Switch
                                checked={inputsConfig?.hasDepartureAddress}
                                onCheck={e => inputsConfig.setDepartureAddressCheckbox(hasDeparture => !hasDeparture)}
                                text={inputsConfig.hasDepartureAddress
                                    ? localizedStrings.activated
                                    : localizedStrings.inactive
                                }
                            />
                        </Col>
                    </Row>
                    {
                        inputsConfig.isEdit && !!qrcodeUrl && qrcodeUrl?.length > 0 &&
                            <Row>
                                <Col xl="2" xxl="2">
                                    <Text
                                    fontWeight="bold"
                                    margin="0 0 10px 0"
                                    color="#666"
                                    marginTop="10px"
                                    marginLeft="10px"
                                    >
                                        {localizedStrings.qrCodePassenger}
                                    </Text>
                                    <img width="100px" height="100px" src={qrcodeUrl} alt="qrcode place id" />
                                </Col>
                                <Col xl="3" xxl="3">
                                    <div style={{marginTop: "75px", marginLeft: "-85px"}}>
                                        <Link download={qrCodeFileName} href={qrcodeUrl}>{localizedStrings.downloadQrCode}</Link>
                                    </div>
                                </Col>
                            </Row>

                    }
                </CardForm>
            </Card>
            <Card margin={"25px 25px 0px 25px"}>
                <CardTitle>{localizedStrings.boardingAddress}</CardTitle>
                <CardForm padding={"16px"}>
                    <Row>
                        <Col xl="6" xxl="6" >
                            <CardInput
                                onChange={(field, value) => {
                                    inputsConfig.onChange(field, value);
                                    canSearchAddressByFirstZipcode && onZipcodeChange(value, "1");
                                }}
                                register={inputsConfig.register}
                                inputs={[
                                    {
                                        label: localizedStrings.zipcode,
                                        defaultValue: inputsConfig.getValues()?.zipcode1,
                                        name: "zipcode1",
                                        type: "zipcode",
                                        placeholder: localizedStrings.typeZipcode,
                                    },
                                ]}
                            />
                        </Col>
                        <Col xl="6" xxl="6" >
                            <CardInput
                                onChange={inputsConfig.onChange}
                                register={inputsConfig.register}
                                inputs={[
                                    {
                                        label: localizedStrings.fullAddress,
                                        defaultValue: inputsConfig.getValues()?.address1,
                                        name: "address1",
                                        type: "text",
                                        error: errors.address1.error,
                                        errorText: errors.address1.message,
                                        required: true,
                                        placeholder: localizedStrings.typeAddress,
                                    },
                                ]}
                            />
                        </Col>
                    </Row>
                    <Row>
                        <Col xl="6" xxl="6" >
                            <CardInput
                                onChange={inputsConfig.onChange}
                                register={inputsConfig.register}
                                inputs={[
                                    {
                                        label: localizedStrings.neighborhood,
                                        defaultValue: inputsConfig.getValues()?.neighborhood1,
                                        name: "neighborhood1",
                                        type: "text",
                                        placeholder: localizedStrings.typeNeighborhood,
                                    }
                                ]}
                            />
                        </Col>
                        <Col xl="6" xxl="6" style={{
                            margin: "10px 0"
                        }} >
                            <Select
                                style={{
                                    margin: "0 10px"
                                }}
                                required
                                title={localizedStrings.city}
                                options={visibleCities}
                                onInputChange={onSelectInputChange}
                                onChange={(item) => {
                                    dispatch(placeChangeSelectors({
                                        selectors: { city1: item }
                                    }))
                                }}
                                value={selectors?.city1 || {}}
                                error={errors.city1.error}
                                errorText={errors.city1.message}
                                emptyStateText={localizedStrings.noCityFound}
                                placeholder={localizedStrings.selectACity}
                            />
                        </Col>
                    </Row>
                    <Row>
                        <Col xl="6" xxl="6" >
                            <CardInput
                                onChange={inputsConfig.onChange}
                                register={inputsConfig.register}
                                inputs={[
                                    {
                                        label: localizedStrings.number,
                                        defaultValue: inputsConfig.getValues()?.number1,
                                        name: "number1",
                                        error: errors.number1.error,
                                        errorText: errors.number1.message,
                                        required: true,
                                        type: "addressNumber",
                                        placeholder: localizedStrings.typeNumber,
                                    }
                                ]}
                            />
                        </Col>
                        <Col xl="6" xxl="6" >
                            <CardInput
                                onChange={inputsConfig.onChange}
                                register={inputsConfig.register}
                                inputs={[
                                    {
                                        label: localizedStrings.complement,
                                        defaultValue: inputsConfig.getValues()?.complement1,
                                        name: "complement1",
                                        type: "text",
                                        error: errors.complement1.error,
                                        errorText: errors.complement1.message,
                                        required: true,
                                        placeholder: localizedStrings.typeComplement,
                                    }
                                ]}
                            />
                        </Col>
                    </Row>
                </CardForm>
            </Card>
            {
                inputsConfig.hasDepartureAddress &&
                <Card margin={"25px 25px 0px 25px"}>
                    <CardTitle>{localizedStrings.landingAddress}</CardTitle>
                    <CardForm padding={"16px"}>
                        <Row>
                            <Col xl="6" xxl="6" >
                                <CardInput
                                    onChange={(field, value) => {
                                        inputsConfig.onChange(field, value);
                                        canSearchAddressBySecondZipcode && onZipcodeChange(value, "2");
                                    }}
                                    register={inputsConfig.register}
                                    inputs={[
                                        {
                                            label: localizedStrings.zipcode,
                                            defaultValue: inputsConfig.getValues()?.zipcode2,
                                            name: "zipcode2",
                                            type: "zipcode",
                                            placeholder: localizedStrings.typeZipcode,
                                        },
                                    ]}
                                />
                            </Col>
                            <Col xl="6" xxl="6" >
                                <CardInput
                                    onChange={inputsConfig.onChange}
                                    register={inputsConfig.register}
                                    inputs={[
                                        {
                                            label: localizedStrings.fullAddress,
                                            defaultValue: inputsConfig.getValues()?.address2,
                                            name: "address2",
                                            type: "text",
                                            error: errors.address2.error,
                                            errorText: errors.address2.message,
                                            required: true,
                                            placeholder: localizedStrings.typeAddress,
                                        },
                                    ]}
                                />
                            </Col>
                        </Row>
                        <Row>
                            <Col xl="6" xxl="6" >
                                <CardInput
                                    onChange={inputsConfig.onChange}
                                    register={inputsConfig.register}
                                    inputs={[
                                        {
                                            label: localizedStrings.neighborhood,
                                            defaultValue: inputsConfig.getValues()?.neighborhood2,
                                            name: "neighborhood2",
                                            type: "text",
                                            placeholder: localizedStrings.typeNeighborhood,
                                        }
                                    ]}
                                />
                            </Col>
                            <Col xl="6" xxl="6" style={{
                                margin: "10px 0"
                            }} >
                                <Select
                                    style={{
                                        margin: "0 10px"
                                    }}
                                    required
                                    title={localizedStrings.city}
                                    options={visibleCities}
                                    onInputChange={onSelectInputChange}
                                    onChange={(item) => {
                                        dispatch(placeChangeSelectors({
                                            selectors: { city2: item }
                                        }))
                                    }}
                                    value={selectors?.city2 || {}}
                                    error={errors.city2.error}
                                    errorText={errors.city2.message}
                                    emptyStateText={localizedStrings.noCityFound}
                                    placeholder={localizedStrings.selectACity}
                                />
                            </Col>
                        </Row>
                        <Row>
                            <Col xl="6" xxl="6" >
                                <CardInput
                                    onChange={inputsConfig.onChange}
                                    register={inputsConfig.register}
                                    inputs={[
                                        {
                                            label: localizedStrings.number,
                                            defaultValue: inputsConfig.getValues()?.number2,
                                            name: "number2",
                                            error: errors.number2.error,
                                            errorText: errors.number2.message,
                                            required: true,
                                            type: "addressNumber",
                                            placeholder: localizedStrings.typeNumber,
                                        }
                                    ]}
                                />
                            </Col>
                            <Col xl="6" xxl="6" >
                                <CardInput
                                    onChange={inputsConfig.onChange}
                                    register={inputsConfig.register}
                                    inputs={[
                                        {
                                            label: localizedStrings.complement,
                                            defaultValue: inputsConfig.getValues()?.complement2,
                                            name: "complement2",
                                            type: "text",
                                            error: errors.complement2.error,
                                            errorText: errors.complement2.message,
                                            required: true,
                                            placeholder: localizedStrings.typeComplement,
                                        }
                                    ]}
                                />
                            </Col>
                        </Row>
                    </CardForm>
                </Card>
            }
            {
                partnerCheckbox &&
                <Card margin={"25px 25px 0px 25px"}>
                    <CardTitle>
                        {localizedStrings.dataOfCompanion}
                    </CardTitle>
                    <CardForm padding={"16px"}>
                        <Row style={{
                            margin: "10px 0"
                        }}>
                            <Col xl="6" xxl="6" >
                                <CardInput
                                    onChange={inputsConfig.onChange}
                                    register={inputsConfig.register}
                                    inputs={[
                                        {
                                            label: localizedStrings.companionName,
                                            defaultValue: inputsConfig.getValues()?.partner_name,
                                            name: "partner_name",
                                            type: "text",
                                            error: errors.partner_name.error,
                                            errorText: errors.partner_name.message,
                                            required: partnerCheckbox,
                                            placeholder: localizedStrings.typeCompanionName
                                        },
                                    ]}
                                />
                            </Col>
                            <Col xl="3" xxl="3" >
                                <CardInput
                                    onChange={inputsConfig.onChange}
                                    register={inputsConfig.register}
                                    inputs={[
                                        {
                                            label: localizedStrings.companionPhone,
                                            defaultValue: inputsConfig.getValues()?.partner_phone,
                                            name: "partner_phone",
                                            type: "phone",
                                            placeholder: localizedStrings.typeCompanionPhone
                                        },
                                    ]}
                                />
                            </Col>
                            <Col xl="3" xxl="3" >
                                <CardInput
                                    onChange={inputsConfig.onChange}
                                    register={inputsConfig.register}
                                    inputs={[
                                        {
                                            label: localizedStrings.companionEmail,
                                            defaultValue: inputsConfig.getValues()?.partner_email,
                                            name: "partner_email",
                                            type: "email",
                                            placeholder: localizedStrings.typeCompanionEmail
                                        },
                                    ]}
                                />
                            </Col>
                        </Row>
                    </CardForm>
                </Card>
            }
            <BottomActionButtons
                onSave={handleSubmit}
                onCancel={() => history.goBack()}
            />
        </>
    );
}
